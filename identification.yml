openapi: 3.0.3
info:
  title: Regula FaceSdk 1:N Identification Module
  version: 3.2.0
  description: |
    Current module allows to create a database with identities providing various search capabilities.

    Main module entities are:

    - **Person**. Identity with __name__, a set of **Images** and __metadata__. Metadata is a regular json object, specified
      by end app.
    - **Image**. Photo of **Person**.
    - **Group**. A set of **Persons**. You can create any number of **Groups**, add or remove **Persons** from them at any
      time. By default, **Person** don't belong to any **Group**. Each **Person** can be member of many **Groups**.
      **Groups** allow limiting identification scope.


paths:
  /persons:
    get:
      tags:
        - person
      summary: Get persons
      operationId: get_all_persons
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: name
          in: query
          required: false
          description: Person name keywords
          schema:
            type: string
      responses:
        200:
          description: Successful operation, return all persons
          content:
            applications/json:
              schema:
                $ref: "#/definitions/PersonsPage"
        400:
          $ref: "#/components/responses/BadRequest"
    post:
      tags:
        - person
      summary: Create person
      operationId: create_person
      requestBody:
        description: Future person
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/PersonFields"
      responses:
        201:
          $ref: "#/components/responses/SuccessPerson"
        400:
          $ref: "#/components/responses/BadRequest"

  /persons/{person_id}:
    parameters:
      - $ref: '#/components/parameters/person_id'
    get:
      tags:
        - person
      summary: Get person
      operationId: get_person
      responses:
        200:
          $ref: "#/components/responses/SuccessPerson"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: '#/components/responses/PersonNotFound'
    put:
      tags:
        - person
      summary: Update person
      operationId: update_person
      requestBody:
        description: Metadata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/PersonFields"
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: '#/components/responses/PersonNotFound'
    delete:
      tags:
        - person
      summary: Delete person
      operationId: delete_person
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: '#/components/responses/PersonNotFound'

  /persons/{person_id}/images:
    parameters:
      - $ref: '#/components/parameters/person_id'
    get:
      tags:
        - person
      summary: Get person images
      operationId: get_all_images_by_person_id
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: Successful operation; return all person images
          content:
            application/json:
              schema:
                $ref: "#/definitions/ImagePage"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: '#/components/responses/PersonNotFound'
    post:
      tags:
        - person
      summary: Add person image
      operationId: add_image_to_person
      parameters:
        - name: force
          in: query
          description: Add image without duplication check
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: Image to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchParams:
                  $ref: "#/definitions/SearchArguments"
                image:
                  $ref: "#/definitions/ImageFields"

      responses:
        200:
          description: Successful operation; return image id
          content:
            applications/json:
              schema:
                type: number
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          description: Similar photo already used, use "force" flag if you want to add image anyway
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/definitions/SearchResult"
        404:
          $ref: '#/components/responses/PersonNotFound'

  /persons/{person_id}/images/{image_id}:
    parameters:
      - $ref: '#/components/parameters/person_id'
    get:
      tags:
        - person
      summary: Get person image by id
      operationId: get_image_of_person
      parameters:
        - $ref: '#/components/parameters/image_id'
      responses:
        404:
          $ref: 'NotFound'
          description: Such image don't exists
        400:
          $ref: 'BadParams'
          description: Person have not such image
        200:
          description: Successful operation, return image
          content:
            image/*:
              schema:
                type: string
                format: binary

    delete:
      tags:
        - person
      summary: Delete image of person
      operationId: delete_image_of_person
      parameters:
        - $ref: '#/components/parameters/image_id'
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          description: Person with person_id or image with image_id not found
          content:
            application/json:
              schema:
                $ref: "#/definitions/OperationLog"

  /persons/{person_id}/groups:
    parameters:
      - $ref: '#/components/parameters/person_id'
    get:
      tags:
        - person
      summary: Get person groups
      operationId: get_all_groups_by_person_id
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: Successful operation; return all groups
          content:
            application/json:
              schema:
                $ref: "#/definitions/GroupPage"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: '#/components/responses/PersonNotFound'

  /groups:
    get:
      tags:
        - group
      summary: Get groups
      operationId: get_all_groups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - name: name
          in: query
          required: false
          description: Group name keywords
          schema:
            type: string
      responses:
        200:
          description: Successful operation, return all groups
          content:
            application/json:
              schema:
                $ref: "#/definitions/GroupPage"
        400:
          $ref: "#/components/responses/BadRequest"
    post:
      tags:
        - group
      summary: Create group
      operationId: create_group
      requestBody:
        description: Group to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/GroupToCreate"
      responses:
        201:
          $ref: "#/components/responses/SuccessGroup"
        400:
          $ref: "#/components/responses/BadRequest"

  /groups/{group_id}:
    parameters:
      - $ref: '#/components/parameters/group_id'
    get:
      tags:
        - group
      summary: Get group
      operationId: get_group
      responses:
        200:
          $ref: "#/components/responses/SuccessGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/GroupNotFound"
    put:
      tags:
        - group
      summary: Update group
      operationId: update_group
      requestBody:
        description: Metadata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/GroupToCreate"
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/GroupNotFound"
    delete:
      tags:
        - group
      summary: Delete group
      operationId: delete_group
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        404:
          $ref: "#/components/responses/GroupNotFound"

  /groups/{group_id}/persons:
    parameters:
      - $ref: "#/components/parameters/group_id"
    get:
      tags:
        - group
      summary: Get group persons
      operationId: get_all_persons_by_group_id
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: Successful operation, return all persons
          content:
            application/json:
              schema:
                $ref: "#/definitions/PersonsPage"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          description: Group with group_id or persons with person_ids not found
          content:
            application/json:
              schema:
                $ref: "#/definitions/OperationLog"
    put:
      tags:
        - group
      summary: Add/remove persons to group
      operationId: update_persons_in_group
      requestBody:
        description: Person ids to add or remove
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/UpdateGroup"
      responses:
        204:
          $ref: "#/components/responses/SuccessEmpty"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/GroupNotFound"

  /search:
    post:
      tags:
        - search
      summary: Find person by image in groups scope
      operationId: search
      requestBody:
        description: Search argument
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/SearchRequest"
      responses:
        200:
          description: Successful operation; return search result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/definitions/SearchResult"
        400:
          $ref: "#/components/responses/BadRequest"

components:
  parameters:
    group_id:
      name: group_id
      in: path
      description: Group id
      required: true
      schema:
        type: number
    person_id:
      name: person_id
      in: path
      description: Person id
      required: true
      schema:
        type: number
    image_id:
      name: image_id
      in: path
      description: Image id
      required: true
      schema:
        type: number
    page:
      name: page
      in: query
      required: true
      description: Current page
      schema:
        type: number
    size:
      name: size
      in: query
      required: true
      description: Page size
      schema:
        type: number

  responses:
    SuccessEmpty:
      description: Successful operation, return nothing
    SuccessGroup:
      description: Successful operation; return group
      content:
        application/json:
          schema:
            $ref: "#/definitions/Group"
    SuccessPerson:
      description: Successful operation; return person
      content:
        application/json:
          schema:
            $ref: "#/definitions/Person"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/definitions/OperationLog"
    GroupNotFound:
      description: Group with group_id not found
      content:
        application/json:
          schema:
            $ref: "#/definitions/OperationLog"
    PersonNotFound:
      description: Person with person_id not found
      content:
        application/json:
          schema:
            $ref: "#/definitions/OperationLog"


definitions:
  Page:
    type: object
    properties:
      page:
        type: number
        example: 1
      total_pages:
        type: number
        example: 2

  GroupToCreate:
    type: object
    properties:
      name:
        type: string
      metadata:
        type: object

  Group:
    allOf:
      - $ref: '#/definitions/GroupToCreate'
      - type: object
        properties:
          id:
            type: number

  GroupPage:
    allOf:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Group"
      - $ref: '#/definitions/Page'

  UpdateGroup:
    type: object
    properties:
      addItems:
        type: array
        items:
          type: number
        example: [1,2,3]
      removeItems:
        type: array
        items:
          type: number
        example: [4,5,6]

  PersonFields:
    type: object
    properties:
      name:
        type: string
      metadata:
        type: object

  Person:
    allOf:
      - $ref: '#/definitions/PersonFields'
      - type: object
        properties:
          id:
            type: number

  PersonsPage:
    allOf:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Person"
      - $ref: '#/definitions/Page'

  ImageContent:
    type: string
    example: "<base64 encoded image>"

  ImageFields:
    type: object
    properties:
      content:
        $ref: '#/definitions/ImageContent'

  Image:
    type: object
    properties:
      id:
        type: number
      content:
        $ref: '#/definitions/ImageContent'

  ImagePage:
    allOf:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Image"
      - $ref: '#/definitions/Page'

  ImageMetadata:
    type: object
    properties:
      metadata:
        type: object

  SearchArguments:
    type: object
    properties:
      max_distance:
        type: number
        required: false
      min_score:
        description: Min recognition score, range 0..1
        type: number
        format: double
        required: false
      result_size:
        type: number
        required: false

  SearchRequest:
    allOf:
      - $ref: "#/definitions/SearchArguments"
      - type: object
        properties:
          group_ids:
            required: false
            type: array
            items:
              type: number
          image:
            $ref: "#/definitions/ImageFields"

  RecognizeImage:
    allOf:
      - $ref: "#/definitions/ImageFields"
      - type: object
        properties:
          similarity:
            type: number

  SearchResult:
    type: object
    properties:
      person:
        $ref: "#/definitions/Person"
      images:
        type: array
        items:
          $ref: "#/definitions/RecognizeImage"


  OperationLog:
    type: object
    properties:
      success:
        type: boolean
      type:
        type: string
      msg:
        type: string
      payload:
        type: object